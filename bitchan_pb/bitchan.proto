syntax = "proto3";
package bitchan_pb;

message BlockHeader {
	bytes previous_block_header_hash = 1;
	bytes body_hash = 2;
	int64 timestamp = 3;
	uint64 nonce = 4;
	float difficulty = 5;
}

message BlockBody {
	repeated bytes transaction_hashes = 1;
}

message Transaction {
	repeated TransactionInput transaction_inputs = 1;
	repeated TransactionOutput transaction_outputs = 2;
	string board_id = 3;
	bytes post_hash = 4;

	// Set only when the post is successive message in the thread.
	bytes thread_transaction_hash = 5;

	// "sage"
	bool downvoted = 6;
}

message TransactionInput {
	bytes previous_transaction_hash = 1;
	int32 previous_transaction_index = 2;
	bytes signature = 3;
	bytes pubic_key = 4;
}

message TransactionOutput {
	int64 amount = 1;
	bytes public_key_hash = 2;
}

message Post {
	string name = 1;
	string mail = 2;
	string content = 3;
	int64 timestamp = 4;

	// Set only when the post is successive message in the thread.
	bytes previous_transaction_hash = 5;

	// Set only when the post is the first message in the thread.
	string thread_title = 6;
}

// Kademlia inspired.
// https://pdos.csail.mit.edu/~petar/papers/maymounkov-kademlia-lncs.pdf
// http://www.bittorrent.org/beps/bep_0005.html
message BitchanMessage {
	bytes own_node_id = 1;
	int32 own_port = 2;

	// FIND_NODE or FIND_VALUE targed identifier.
	bytes target_id = 3;

	// Return stored_value instead of nodes. (FIND_VALUE)
	bool find_value = 4;

	// Response for FIND_NODE or FIND_VALUE
	repeated Node nodes = 5;

	// STORE
	StoredValue stored_value = 6;

	// inv of Bitcoin
	repeated NotifiedHash notified_hashes = 7;

	// If set, needs pong.
	bool is_ping = 8;
}

message NotifiedHash {
	DataType data_type = 1;
	bytes hash = 2;
}

message Node {
	string address = 1;
	// 160 bit kademlia ID
	bytes node_id = 2;
}

enum DataType {
	BLOCK_HEADER = 0;
	BLOCK_BODY   = 1;
	TRANSACTION  = 2;
	POST         = 3;
};

message StoredValue {
	bytes data = 1;
	DataType data_type = 2;
}
