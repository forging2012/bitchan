// Code generated by protoc-gen-go.
// source: bitchan.proto
// DO NOT EDIT!

/*
Package bitchan_pb is a generated protocol buffer package.

It is generated from these files:
	bitchan.proto

It has these top-level messages:
	BlockHeader
	BlockBody
	Transaction
	TransactionInput
	TransactionOutput
	Post
	AddressRequest
	AddressResponse
	Address
	BlockRequest
	BlockResponse
	PostRequest
	PostResponse
*/
package bitchan_pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BlockHeader struct {
	PreviousBlockHeaderHash []byte  `protobuf:"bytes,1,opt,name=previous_block_header_hash,proto3" json:"previous_block_header_hash,omitempty"`
	BodyHash                []byte  `protobuf:"bytes,2,opt,name=body_hash,proto3" json:"body_hash,omitempty"`
	Timestamp               int64   `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Nonce                   uint64  `protobuf:"varint,4,opt,name=nonce" json:"nonce,omitempty"`
	Difficulty              float32 `protobuf:"fixed32,5,opt,name=difficulty" json:"difficulty,omitempty"`
}

func (m *BlockHeader) Reset()                    { *m = BlockHeader{} }
func (m *BlockHeader) String() string            { return proto.CompactTextString(m) }
func (*BlockHeader) ProtoMessage()               {}
func (*BlockHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BlockHeader) GetPreviousBlockHeaderHash() []byte {
	if m != nil {
		return m.PreviousBlockHeaderHash
	}
	return nil
}

func (m *BlockHeader) GetBodyHash() []byte {
	if m != nil {
		return m.BodyHash
	}
	return nil
}

func (m *BlockHeader) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *BlockHeader) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *BlockHeader) GetDifficulty() float32 {
	if m != nil {
		return m.Difficulty
	}
	return 0
}

type BlockBody struct {
	Transactions []*Transaction `protobuf:"bytes,1,rep,name=transactions" json:"transactions,omitempty"`
}

func (m *BlockBody) Reset()                    { *m = BlockBody{} }
func (m *BlockBody) String() string            { return proto.CompactTextString(m) }
func (*BlockBody) ProtoMessage()               {}
func (*BlockBody) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BlockBody) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type Transaction struct {
	TransactionInputs  []*TransactionInput  `protobuf:"bytes,1,rep,name=transaction_inputs" json:"transaction_inputs,omitempty"`
	TransactionOutputs []*TransactionOutput `protobuf:"bytes,2,rep,name=transaction_outputs" json:"transaction_outputs,omitempty"`
	BoardId            string               `protobuf:"bytes,3,opt,name=board_id" json:"board_id,omitempty"`
	PostHash           []byte               `protobuf:"bytes,4,opt,name=post_hash,proto3" json:"post_hash,omitempty"`
	// Set only when the post is successive message in the thread.
	ThreadTransactionHash []byte `protobuf:"bytes,5,opt,name=thread_transaction_hash,proto3" json:"thread_transaction_hash,omitempty"`
	// "sage"
	Downvoted bool `protobuf:"varint,6,opt,name=downvoted" json:"downvoted,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Transaction) GetTransactionInputs() []*TransactionInput {
	if m != nil {
		return m.TransactionInputs
	}
	return nil
}

func (m *Transaction) GetTransactionOutputs() []*TransactionOutput {
	if m != nil {
		return m.TransactionOutputs
	}
	return nil
}

func (m *Transaction) GetBoardId() string {
	if m != nil {
		return m.BoardId
	}
	return ""
}

func (m *Transaction) GetPostHash() []byte {
	if m != nil {
		return m.PostHash
	}
	return nil
}

func (m *Transaction) GetThreadTransactionHash() []byte {
	if m != nil {
		return m.ThreadTransactionHash
	}
	return nil
}

func (m *Transaction) GetDownvoted() bool {
	if m != nil {
		return m.Downvoted
	}
	return false
}

type TransactionInput struct {
	PreviousTransactionHash  []byte `protobuf:"bytes,1,opt,name=previous_transaction_hash,proto3" json:"previous_transaction_hash,omitempty"`
	PreviousTransactionIndex int32  `protobuf:"varint,2,opt,name=previous_transaction_index" json:"previous_transaction_index,omitempty"`
	Signature                []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	PubicKey                 []byte `protobuf:"bytes,4,opt,name=pubic_key,proto3" json:"pubic_key,omitempty"`
}

func (m *TransactionInput) Reset()                    { *m = TransactionInput{} }
func (m *TransactionInput) String() string            { return proto.CompactTextString(m) }
func (*TransactionInput) ProtoMessage()               {}
func (*TransactionInput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *TransactionInput) GetPreviousTransactionHash() []byte {
	if m != nil {
		return m.PreviousTransactionHash
	}
	return nil
}

func (m *TransactionInput) GetPreviousTransactionIndex() int32 {
	if m != nil {
		return m.PreviousTransactionIndex
	}
	return 0
}

func (m *TransactionInput) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *TransactionInput) GetPubicKey() []byte {
	if m != nil {
		return m.PubicKey
	}
	return nil
}

type TransactionOutput struct {
	Amount        int64  `protobuf:"varint,1,opt,name=amount" json:"amount,omitempty"`
	PublicKeyHash []byte `protobuf:"bytes,2,opt,name=public_key_hash,proto3" json:"public_key_hash,omitempty"`
}

func (m *TransactionOutput) Reset()                    { *m = TransactionOutput{} }
func (m *TransactionOutput) String() string            { return proto.CompactTextString(m) }
func (*TransactionOutput) ProtoMessage()               {}
func (*TransactionOutput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *TransactionOutput) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *TransactionOutput) GetPublicKeyHash() []byte {
	if m != nil {
		return m.PublicKeyHash
	}
	return nil
}

type Post struct {
	Name      string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Mail      string `protobuf:"bytes,2,opt,name=mail" json:"mail,omitempty"`
	Content   string `protobuf:"bytes,3,opt,name=content" json:"content,omitempty"`
	Timestamp int64  `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	// Set only when the post is successive message in the thread.
	PreviousTransactionHash []byte `protobuf:"bytes,5,opt,name=previous_transaction_hash,proto3" json:"previous_transaction_hash,omitempty"`
	// Set only when the post is the first message in the thread.
	ThreadTitle string `protobuf:"bytes,6,opt,name=thread_title" json:"thread_title,omitempty"`
}

func (m *Post) Reset()                    { *m = Post{} }
func (m *Post) String() string            { return proto.CompactTextString(m) }
func (*Post) ProtoMessage()               {}
func (*Post) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Post) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Post) GetMail() string {
	if m != nil {
		return m.Mail
	}
	return ""
}

func (m *Post) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Post) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Post) GetPreviousTransactionHash() []byte {
	if m != nil {
		return m.PreviousTransactionHash
	}
	return nil
}

func (m *Post) GetThreadTitle() string {
	if m != nil {
		return m.ThreadTitle
	}
	return ""
}

type AddressRequest struct {
}

func (m *AddressRequest) Reset()                    { *m = AddressRequest{} }
func (m *AddressRequest) String() string            { return proto.CompactTextString(m) }
func (*AddressRequest) ProtoMessage()               {}
func (*AddressRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type AddressResponse struct {
	Address []*Address `protobuf:"bytes,1,rep,name=address" json:"address,omitempty"`
}

func (m *AddressResponse) Reset()                    { *m = AddressResponse{} }
func (m *AddressResponse) String() string            { return proto.CompactTextString(m) }
func (*AddressResponse) ProtoMessage()               {}
func (*AddressResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *AddressResponse) GetAddress() []*Address {
	if m != nil {
		return m.Address
	}
	return nil
}

type Address struct {
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	// 160 bit kademlia ID
	NodeId []byte `protobuf:"bytes,2,opt,name=node_id,proto3" json:"node_id,omitempty"`
}

func (m *Address) Reset()                    { *m = Address{} }
func (m *Address) String() string            { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()               {}
func (*Address) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Address) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Address) GetNodeId() []byte {
	if m != nil {
		return m.NodeId
	}
	return nil
}

type BlockRequest struct {
	BlockHash []byte `protobuf:"bytes,1,opt,name=block_hash,proto3" json:"block_hash,omitempty"`
}

func (m *BlockRequest) Reset()                    { *m = BlockRequest{} }
func (m *BlockRequest) String() string            { return proto.CompactTextString(m) }
func (*BlockRequest) ProtoMessage()               {}
func (*BlockRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *BlockRequest) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

type BlockResponse struct {
	BlockHeader *BlockHeader `protobuf:"bytes,1,opt,name=block_header" json:"block_header,omitempty"`
	BlockBody   *BlockBody   `protobuf:"bytes,2,opt,name=block_body" json:"block_body,omitempty"`
}

func (m *BlockResponse) Reset()                    { *m = BlockResponse{} }
func (m *BlockResponse) String() string            { return proto.CompactTextString(m) }
func (*BlockResponse) ProtoMessage()               {}
func (*BlockResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *BlockResponse) GetBlockHeader() *BlockHeader {
	if m != nil {
		return m.BlockHeader
	}
	return nil
}

func (m *BlockResponse) GetBlockBody() *BlockBody {
	if m != nil {
		return m.BlockBody
	}
	return nil
}

type PostRequest struct {
	PostHash []byte `protobuf:"bytes,1,opt,name=post_hash,proto3" json:"post_hash,omitempty"`
}

func (m *PostRequest) Reset()                    { *m = PostRequest{} }
func (m *PostRequest) String() string            { return proto.CompactTextString(m) }
func (*PostRequest) ProtoMessage()               {}
func (*PostRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *PostRequest) GetPostHash() []byte {
	if m != nil {
		return m.PostHash
	}
	return nil
}

type PostResponse struct {
	Post *Post `protobuf:"bytes,1,opt,name=post" json:"post,omitempty"`
}

func (m *PostResponse) Reset()                    { *m = PostResponse{} }
func (m *PostResponse) String() string            { return proto.CompactTextString(m) }
func (*PostResponse) ProtoMessage()               {}
func (*PostResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *PostResponse) GetPost() *Post {
	if m != nil {
		return m.Post
	}
	return nil
}

func init() {
	proto.RegisterType((*BlockHeader)(nil), "bitchan_pb.BlockHeader")
	proto.RegisterType((*BlockBody)(nil), "bitchan_pb.BlockBody")
	proto.RegisterType((*Transaction)(nil), "bitchan_pb.Transaction")
	proto.RegisterType((*TransactionInput)(nil), "bitchan_pb.TransactionInput")
	proto.RegisterType((*TransactionOutput)(nil), "bitchan_pb.TransactionOutput")
	proto.RegisterType((*Post)(nil), "bitchan_pb.Post")
	proto.RegisterType((*AddressRequest)(nil), "bitchan_pb.AddressRequest")
	proto.RegisterType((*AddressResponse)(nil), "bitchan_pb.AddressResponse")
	proto.RegisterType((*Address)(nil), "bitchan_pb.Address")
	proto.RegisterType((*BlockRequest)(nil), "bitchan_pb.BlockRequest")
	proto.RegisterType((*BlockResponse)(nil), "bitchan_pb.BlockResponse")
	proto.RegisterType((*PostRequest)(nil), "bitchan_pb.PostRequest")
	proto.RegisterType((*PostResponse)(nil), "bitchan_pb.PostResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Bitchan service

type BitchanClient interface {
	GetAddress(ctx context.Context, opts ...grpc.CallOption) (Bitchan_GetAddressClient, error)
	GetBlock(ctx context.Context, opts ...grpc.CallOption) (Bitchan_GetBlockClient, error)
	GetPost(ctx context.Context, opts ...grpc.CallOption) (Bitchan_GetPostClient, error)
}

type bitchanClient struct {
	cc *grpc.ClientConn
}

func NewBitchanClient(cc *grpc.ClientConn) BitchanClient {
	return &bitchanClient{cc}
}

func (c *bitchanClient) GetAddress(ctx context.Context, opts ...grpc.CallOption) (Bitchan_GetAddressClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Bitchan_serviceDesc.Streams[0], c.cc, "/bitchan_pb.Bitchan/GetAddress", opts...)
	if err != nil {
		return nil, err
	}
	x := &bitchanGetAddressClient{stream}
	return x, nil
}

type Bitchan_GetAddressClient interface {
	Send(*AddressRequest) error
	Recv() (*AddressResponse, error)
	grpc.ClientStream
}

type bitchanGetAddressClient struct {
	grpc.ClientStream
}

func (x *bitchanGetAddressClient) Send(m *AddressRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bitchanGetAddressClient) Recv() (*AddressResponse, error) {
	m := new(AddressResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bitchanClient) GetBlock(ctx context.Context, opts ...grpc.CallOption) (Bitchan_GetBlockClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Bitchan_serviceDesc.Streams[1], c.cc, "/bitchan_pb.Bitchan/GetBlock", opts...)
	if err != nil {
		return nil, err
	}
	x := &bitchanGetBlockClient{stream}
	return x, nil
}

type Bitchan_GetBlockClient interface {
	Send(*BlockRequest) error
	Recv() (*BlockResponse, error)
	grpc.ClientStream
}

type bitchanGetBlockClient struct {
	grpc.ClientStream
}

func (x *bitchanGetBlockClient) Send(m *BlockRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bitchanGetBlockClient) Recv() (*BlockResponse, error) {
	m := new(BlockResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bitchanClient) GetPost(ctx context.Context, opts ...grpc.CallOption) (Bitchan_GetPostClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Bitchan_serviceDesc.Streams[2], c.cc, "/bitchan_pb.Bitchan/GetPost", opts...)
	if err != nil {
		return nil, err
	}
	x := &bitchanGetPostClient{stream}
	return x, nil
}

type Bitchan_GetPostClient interface {
	Send(*PostRequest) error
	Recv() (*PostResponse, error)
	grpc.ClientStream
}

type bitchanGetPostClient struct {
	grpc.ClientStream
}

func (x *bitchanGetPostClient) Send(m *PostRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bitchanGetPostClient) Recv() (*PostResponse, error) {
	m := new(PostResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Bitchan service

type BitchanServer interface {
	GetAddress(Bitchan_GetAddressServer) error
	GetBlock(Bitchan_GetBlockServer) error
	GetPost(Bitchan_GetPostServer) error
}

func RegisterBitchanServer(s *grpc.Server, srv BitchanServer) {
	s.RegisterService(&_Bitchan_serviceDesc, srv)
}

func _Bitchan_GetAddress_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BitchanServer).GetAddress(&bitchanGetAddressServer{stream})
}

type Bitchan_GetAddressServer interface {
	Send(*AddressResponse) error
	Recv() (*AddressRequest, error)
	grpc.ServerStream
}

type bitchanGetAddressServer struct {
	grpc.ServerStream
}

func (x *bitchanGetAddressServer) Send(m *AddressResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bitchanGetAddressServer) Recv() (*AddressRequest, error) {
	m := new(AddressRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Bitchan_GetBlock_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BitchanServer).GetBlock(&bitchanGetBlockServer{stream})
}

type Bitchan_GetBlockServer interface {
	Send(*BlockResponse) error
	Recv() (*BlockRequest, error)
	grpc.ServerStream
}

type bitchanGetBlockServer struct {
	grpc.ServerStream
}

func (x *bitchanGetBlockServer) Send(m *BlockResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bitchanGetBlockServer) Recv() (*BlockRequest, error) {
	m := new(BlockRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Bitchan_GetPost_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BitchanServer).GetPost(&bitchanGetPostServer{stream})
}

type Bitchan_GetPostServer interface {
	Send(*PostResponse) error
	Recv() (*PostRequest, error)
	grpc.ServerStream
}

type bitchanGetPostServer struct {
	grpc.ServerStream
}

func (x *bitchanGetPostServer) Send(m *PostResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bitchanGetPostServer) Recv() (*PostRequest, error) {
	m := new(PostRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Bitchan_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bitchan_pb.Bitchan",
	HandlerType: (*BitchanServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAddress",
			Handler:       _Bitchan_GetAddress_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetBlock",
			Handler:       _Bitchan_GetBlock_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetPost",
			Handler:       _Bitchan_GetPost_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "bitchan.proto",
}

func init() { proto.RegisterFile("bitchan.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 614 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0x4d, 0x6f, 0xd3, 0x4c,
	0x10, 0x7e, 0xdd, 0x38, 0x4d, 0x33, 0x71, 0xdb, 0x74, 0xfb, 0xa2, 0xb8, 0xe5, 0xcb, 0xac, 0x38,
	0x18, 0xa1, 0x46, 0xa8, 0x1c, 0x40, 0x15, 0x17, 0x22, 0xa1, 0x82, 0x38, 0x80, 0x10, 0x77, 0x6b,
	0xed, 0xdd, 0x92, 0x55, 0x93, 0x5d, 0xe3, 0x5d, 0x17, 0xc2, 0xa5, 0x7f, 0x94, 0x0b, 0xff, 0x04,
	0xed, 0x87, 0x1b, 0xb7, 0x6e, 0xb9, 0x79, 0x67, 0x9e, 0x99, 0x79, 0xe6, 0x99, 0x19, 0xc3, 0x76,
	0xce, 0x75, 0x31, 0x27, 0x62, 0x5a, 0x56, 0x52, 0x4b, 0x04, 0xfe, 0x99, 0x95, 0x39, 0xfe, 0x05,
	0xa3, 0xd9, 0x42, 0x16, 0xe7, 0xef, 0x19, 0xa1, 0xac, 0x42, 0x18, 0x0e, 0xcb, 0x8a, 0x5d, 0x70,
	0x59, 0xab, 0x2c, 0x37, 0xf6, 0x6c, 0x6e, 0x1d, 0xd9, 0x9c, 0xa8, 0x79, 0x1c, 0x24, 0x41, 0x1a,
	0xa1, 0x3d, 0x18, 0xe6, 0x92, 0xae, 0x9c, 0x69, 0xa3, 0x31, 0x69, 0xbe, 0x64, 0x4a, 0x93, 0x65,
	0x19, 0xf7, 0x92, 0x20, 0xed, 0xa1, 0x6d, 0xe8, 0x0b, 0x29, 0x0a, 0x16, 0x87, 0x49, 0x90, 0x86,
	0x08, 0x01, 0x50, 0x7e, 0x76, 0xc6, 0x8b, 0x7a, 0xa1, 0x57, 0x71, 0x3f, 0x09, 0xd2, 0x0d, 0x7c,
	0x02, 0x43, 0x5b, 0x7b, 0x26, 0xe9, 0x0a, 0x1d, 0x41, 0xa4, 0x2b, 0x22, 0x14, 0x29, 0x34, 0x97,
	0x42, 0xc5, 0x41, 0xd2, 0x4b, 0x47, 0xc7, 0x93, 0xe9, 0x9a, 0xeb, 0xf4, 0xeb, 0xda, 0x8f, 0x7f,
	0x07, 0x30, 0x6a, 0xbd, 0xd1, 0x6b, 0x40, 0xad, 0xf0, 0x8c, 0x8b, 0xb2, 0xd6, 0x4d, 0x92, 0x07,
	0x77, 0x24, 0xf9, 0x60, 0x40, 0xe8, 0x04, 0xf6, 0xdb, 0x91, 0xb2, 0xd6, 0x36, 0x74, 0xc3, 0x86,
	0x3e, 0xbc, 0x23, 0xf4, 0x93, 0x45, 0xa1, 0x31, 0x6c, 0xe5, 0x92, 0x54, 0x34, 0xe3, 0xd4, 0xb6,
	0x3d, 0x34, 0x4a, 0x94, 0x52, 0x69, 0x27, 0x4e, 0x68, 0xc5, 0x79, 0x0c, 0x13, 0x3d, 0xaf, 0x18,
	0xa1, 0x59, 0xbb, 0x8e, 0x05, 0xf4, 0x1b, 0xf5, 0xa8, 0xfc, 0x21, 0x2e, 0xa4, 0x66, 0x34, 0xde,
	0x4c, 0x82, 0x74, 0x0b, 0x5f, 0xc2, 0xb8, 0x43, 0xf4, 0x09, 0x1c, 0x5c, 0xcd, 0xa6, 0x93, 0xc9,
	0x8d, 0xa6, 0x3d, 0xbe, 0xeb, 0x72, 0x50, 0xf6, 0xd3, 0xce, 0xaa, 0x6f, 0xaa, 0x29, 0xfe, 0x4d,
	0x10, 0x5d, 0x57, 0xcc, 0x92, 0xb6, 0x04, 0xca, 0x3a, 0xe7, 0x45, 0x76, 0xce, 0x56, 0x8e, 0x34,
	0x7e, 0x03, 0x7b, 0xdd, 0x76, 0x77, 0x60, 0x93, 0x2c, 0x65, 0x2d, 0xb4, 0x2d, 0xd7, 0x43, 0x13,
	0xd8, 0x2d, 0xeb, 0x7c, 0xe1, 0x02, 0x5b, 0xfb, 0x80, 0x2f, 0x21, 0xfc, 0x2c, 0x95, 0x46, 0x11,
	0x84, 0x82, 0x2c, 0x99, 0x85, 0x0f, 0xcd, 0x6b, 0x49, 0xf8, 0xc2, 0x62, 0x86, 0x68, 0x17, 0x06,
	0x85, 0x14, 0x9a, 0x09, 0xbd, 0x96, 0x6e, 0xbd, 0x44, 0xa1, 0x2d, 0xf0, 0xcf, 0x96, 0x9d, 0x78,
	0xff, 0x43, 0xd4, 0xa8, 0xcb, 0xf5, 0x82, 0x59, 0xfd, 0x86, 0x78, 0x0c, 0x3b, 0x6f, 0x29, 0xad,
	0x98, 0x52, 0x5f, 0xd8, 0xf7, 0x9a, 0x29, 0x8d, 0x5f, 0xc1, 0xee, 0x95, 0x45, 0x95, 0x52, 0x28,
	0x86, 0x9e, 0xc2, 0x80, 0x38, 0x93, 0x5f, 0x94, 0xfd, 0xf6, 0xb4, 0x3d, 0x1a, 0x3f, 0x87, 0x81,
	0xff, 0x34, 0x94, 0xd7, 0x01, 0xbe, 0x07, 0x21, 0x29, 0x33, 0xe3, 0x77, 0x8d, 0x63, 0x88, 0xec,
	0x4a, 0xfb, 0xaa, 0x66, 0xed, 0xfd, 0x19, 0x5d, 0x0d, 0x09, 0x73, 0xd8, 0xf6, 0x18, 0xcf, 0xe3,
	0x08, 0xa2, 0xf6, 0xad, 0x59, 0xd8, 0x8d, 0xd5, 0x6f, 0xdf, 0xe8, 0xb3, 0x26, 0xa7, 0xb9, 0x42,
	0x5b, 0x77, 0x74, 0x7c, 0xaf, 0x03, 0x36, 0x47, 0x85, 0x13, 0x18, 0x99, 0x39, 0x34, 0x6c, 0xae,
	0x2d, 0xa7, 0x23, 0x33, 0x85, 0xc8, 0x21, 0x3c, 0x97, 0x47, 0x10, 0x1a, 0x88, 0xe7, 0x30, 0x6e,
	0xa7, 0x35, 0xb8, 0xe3, 0x3f, 0x01, 0x0c, 0x66, 0xce, 0x86, 0x3e, 0x02, 0x9c, 0x32, 0xdd, 0x88,
	0x73, 0x78, 0x8b, 0x78, 0xbe, 0xf0, 0xe1, 0xfd, 0x5b, 0x7d, 0xae, 0x24, 0xfe, 0x2f, 0x0d, 0x5e,
	0x04, 0xe8, 0x1d, 0x6c, 0x9d, 0x32, 0x6d, 0xa9, 0xa3, 0xb8, 0xd3, 0x4d, 0x93, 0xe8, 0xe0, 0x16,
	0xcf, 0xb5, 0x34, 0x33, 0x18, 0x9c, 0x32, 0x6d, 0x97, 0x6f, 0x72, 0x93, 0x7c, 0x93, 0x24, 0xee,
	0x3a, 0xda, 0x39, 0xf2, 0x4d, 0xfb, 0x9b, 0x7c, 0xf9, 0x37, 0x00, 0x00, 0xff, 0xff, 0xe9, 0x08,
	0x2c, 0x9f, 0x37, 0x05, 0x00, 0x00,
}
