// Code generated by protoc-gen-go.
// source: bitchan.proto
// DO NOT EDIT!

/*
Package bitchan_pb is a generated protocol buffer package.

It is generated from these files:
	bitchan.proto

It has these top-level messages:
	BlockHeader
	BlockBody
	Transaction
	TransactionInput
	TransactionOutput
	Post
*/
package bitchan_pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BlockHeader struct {
	PreviousBlockHeaderHash []byte  `protobuf:"bytes,1,opt,name=previous_block_header_hash,proto3" json:"previous_block_header_hash,omitempty"`
	BodyHash                []byte  `protobuf:"bytes,2,opt,name=body_hash,proto3" json:"body_hash,omitempty"`
	Timestamp               int64   `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Nonce                   uint64  `protobuf:"varint,4,opt,name=nonce" json:"nonce,omitempty"`
	Difficulty              float32 `protobuf:"fixed32,5,opt,name=difficulty" json:"difficulty,omitempty"`
}

func (m *BlockHeader) Reset()                    { *m = BlockHeader{} }
func (m *BlockHeader) String() string            { return proto.CompactTextString(m) }
func (*BlockHeader) ProtoMessage()               {}
func (*BlockHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BlockHeader) GetPreviousBlockHeaderHash() []byte {
	if m != nil {
		return m.PreviousBlockHeaderHash
	}
	return nil
}

func (m *BlockHeader) GetBodyHash() []byte {
	if m != nil {
		return m.BodyHash
	}
	return nil
}

func (m *BlockHeader) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *BlockHeader) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *BlockHeader) GetDifficulty() float32 {
	if m != nil {
		return m.Difficulty
	}
	return 0
}

type BlockBody struct {
	Transactions []*Transaction `protobuf:"bytes,1,rep,name=transactions" json:"transactions,omitempty"`
}

func (m *BlockBody) Reset()                    { *m = BlockBody{} }
func (m *BlockBody) String() string            { return proto.CompactTextString(m) }
func (*BlockBody) ProtoMessage()               {}
func (*BlockBody) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BlockBody) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type Transaction struct {
	TransactionInputs  []*TransactionInput  `protobuf:"bytes,1,rep,name=transaction_inputs" json:"transaction_inputs,omitempty"`
	TransactionOutputs []*TransactionOutput `protobuf:"bytes,2,rep,name=transaction_outputs" json:"transaction_outputs,omitempty"`
	BoardId            string               `protobuf:"bytes,3,opt,name=board_id" json:"board_id,omitempty"`
	PostHash           []byte               `protobuf:"bytes,4,opt,name=post_hash,proto3" json:"post_hash,omitempty"`
	// Set only when the post is successive message in the thread.
	ThreadTransactionHash []byte `protobuf:"bytes,5,opt,name=thread_transaction_hash,proto3" json:"thread_transaction_hash,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Transaction) GetTransactionInputs() []*TransactionInput {
	if m != nil {
		return m.TransactionInputs
	}
	return nil
}

func (m *Transaction) GetTransactionOutputs() []*TransactionOutput {
	if m != nil {
		return m.TransactionOutputs
	}
	return nil
}

func (m *Transaction) GetBoardId() string {
	if m != nil {
		return m.BoardId
	}
	return ""
}

func (m *Transaction) GetPostHash() []byte {
	if m != nil {
		return m.PostHash
	}
	return nil
}

func (m *Transaction) GetThreadTransactionHash() []byte {
	if m != nil {
		return m.ThreadTransactionHash
	}
	return nil
}

type TransactionInput struct {
	PreviousTransactionHash  []byte `protobuf:"bytes,1,opt,name=previous_transaction_hash,proto3" json:"previous_transaction_hash,omitempty"`
	PreviousTransactionIndex int32  `protobuf:"varint,2,opt,name=previous_transaction_index" json:"previous_transaction_index,omitempty"`
	Signature                []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	PubicKey                 []byte `protobuf:"bytes,4,opt,name=pubic_key,proto3" json:"pubic_key,omitempty"`
}

func (m *TransactionInput) Reset()                    { *m = TransactionInput{} }
func (m *TransactionInput) String() string            { return proto.CompactTextString(m) }
func (*TransactionInput) ProtoMessage()               {}
func (*TransactionInput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *TransactionInput) GetPreviousTransactionHash() []byte {
	if m != nil {
		return m.PreviousTransactionHash
	}
	return nil
}

func (m *TransactionInput) GetPreviousTransactionIndex() int32 {
	if m != nil {
		return m.PreviousTransactionIndex
	}
	return 0
}

func (m *TransactionInput) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *TransactionInput) GetPubicKey() []byte {
	if m != nil {
		return m.PubicKey
	}
	return nil
}

type TransactionOutput struct {
	Amount        int64  `protobuf:"varint,1,opt,name=amount" json:"amount,omitempty"`
	PublicKeyHash []byte `protobuf:"bytes,2,opt,name=public_key_hash,proto3" json:"public_key_hash,omitempty"`
}

func (m *TransactionOutput) Reset()                    { *m = TransactionOutput{} }
func (m *TransactionOutput) String() string            { return proto.CompactTextString(m) }
func (*TransactionOutput) ProtoMessage()               {}
func (*TransactionOutput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *TransactionOutput) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *TransactionOutput) GetPublicKeyHash() []byte {
	if m != nil {
		return m.PublicKeyHash
	}
	return nil
}

type Post struct {
	Name      string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Mail      string `protobuf:"bytes,2,opt,name=mail" json:"mail,omitempty"`
	Content   string `protobuf:"bytes,3,opt,name=content" json:"content,omitempty"`
	Timestamp int64  `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	// Set only when the post is successive message in the thread.
	PreviousTransactionHash []byte `protobuf:"bytes,5,opt,name=previous_transaction_hash,proto3" json:"previous_transaction_hash,omitempty"`
	// Set only when the post is the first message in the thread.
	ThreadTitle string `protobuf:"bytes,6,opt,name=thread_title" json:"thread_title,omitempty"`
}

func (m *Post) Reset()                    { *m = Post{} }
func (m *Post) String() string            { return proto.CompactTextString(m) }
func (*Post) ProtoMessage()               {}
func (*Post) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Post) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Post) GetMail() string {
	if m != nil {
		return m.Mail
	}
	return ""
}

func (m *Post) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Post) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Post) GetPreviousTransactionHash() []byte {
	if m != nil {
		return m.PreviousTransactionHash
	}
	return nil
}

func (m *Post) GetThreadTitle() string {
	if m != nil {
		return m.ThreadTitle
	}
	return ""
}

func init() {
	proto.RegisterType((*BlockHeader)(nil), "bitchan_pb.BlockHeader")
	proto.RegisterType((*BlockBody)(nil), "bitchan_pb.BlockBody")
	proto.RegisterType((*Transaction)(nil), "bitchan_pb.Transaction")
	proto.RegisterType((*TransactionInput)(nil), "bitchan_pb.TransactionInput")
	proto.RegisterType((*TransactionOutput)(nil), "bitchan_pb.TransactionOutput")
	proto.RegisterType((*Post)(nil), "bitchan_pb.Post")
}

func init() { proto.RegisterFile("bitchan.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 403 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0xb1, 0x8e, 0xd4, 0x30,
	0x10, 0x55, 0x76, 0xb3, 0x0b, 0x99, 0xcd, 0x71, 0x77, 0x06, 0x69, 0x03, 0x02, 0x11, 0x52, 0xa5,
	0x61, 0x0b, 0x68, 0xd0, 0x89, 0xea, 0x2a, 0xa8, 0xa0, 0xa0, 0xb7, 0xec, 0xd8, 0x47, 0xac, 0x4b,
	0x6c, 0x2b, 0x1e, 0x23, 0x96, 0xe6, 0xbe, 0x8f, 0xbf, 0x42, 0x99, 0xb0, 0x6c, 0xd0, 0xea, 0xae,
	0x9c, 0xf1, 0x7b, 0x33, 0x6f, 0xde, 0x33, 0x9c, 0x49, 0x83, 0x4d, 0x2b, 0xec, 0xce, 0x0f, 0x0e,
	0x1d, 0x83, 0xbf, 0x25, 0xf7, 0xb2, 0xfa, 0x05, 0x9b, 0xeb, 0xce, 0x35, 0xb7, 0x9f, 0xb4, 0x50,
	0x7a, 0x60, 0x15, 0xbc, 0xf0, 0x83, 0xfe, 0x61, 0x5c, 0x0c, 0x5c, 0x8e, 0x7d, 0xde, 0xd2, 0x03,
	0x6f, 0x45, 0x68, 0x8b, 0xa4, 0x4c, 0xea, 0x9c, 0x5d, 0x42, 0x26, 0x9d, 0xda, 0x4f, 0xad, 0xc5,
	0xa1, 0x85, 0xa6, 0xd7, 0x01, 0x45, 0xef, 0x8b, 0x65, 0x99, 0xd4, 0x4b, 0x76, 0x06, 0x2b, 0xeb,
	0x6c, 0xa3, 0x8b, 0xb4, 0x4c, 0xea, 0x94, 0x31, 0x00, 0x65, 0x6e, 0x6e, 0x4c, 0x13, 0x3b, 0xdc,
	0x17, 0xab, 0x32, 0xa9, 0x17, 0xd5, 0x15, 0x64, 0xb4, 0xfb, 0xda, 0xa9, 0x3d, 0x7b, 0x0b, 0x39,
	0x0e, 0xc2, 0x06, 0xd1, 0xa0, 0x71, 0x36, 0x14, 0x49, 0xb9, 0xac, 0x37, 0xef, 0xb6, 0xbb, 0xa3,
	0xd6, 0xdd, 0xb7, 0xe3, 0x7b, 0xf5, 0x3b, 0x81, 0xcd, 0xac, 0x66, 0x1f, 0x80, 0xcd, 0xe8, 0xdc,
	0x58, 0x1f, 0xf1, 0x30, 0xe4, 0xe5, 0x3d, 0x43, 0x3e, 0x8f, 0x20, 0x76, 0x05, 0x4f, 0xe7, 0x4c,
	0x17, 0x91, 0xa8, 0x0b, 0xa2, 0xbe, 0xba, 0x87, 0xfa, 0x85, 0x50, 0xec, 0x02, 0x1e, 0x4b, 0x27,
	0x06, 0xc5, 0x8d, 0xa2, 0xb3, 0xb3, 0xd1, 0x09, 0xef, 0x02, 0x4e, 0xe6, 0xa4, 0x64, 0xce, 0x6b,
	0xd8, 0x62, 0x3b, 0x68, 0xa1, 0xf8, 0x7c, 0x0f, 0x01, 0x46, 0x1f, 0xf2, 0xea, 0x0e, 0x2e, 0x4e,
	0x54, 0xbd, 0x81, 0xe7, 0xff, 0x82, 0x38, 0xa1, 0x4d, 0x39, 0xcc, 0xb3, 0xfa, 0xff, 0x76, 0xa5,
	0x7f, 0x52, 0x30, 0xab, 0x51, 0x4e, 0x30, 0xdf, 0xad, 0xc0, 0x38, 0x68, 0x52, 0x48, 0x59, 0xf9,
	0x28, 0x4d, 0xc3, 0x6f, 0xf5, 0x7e, 0x52, 0x58, 0x7d, 0x84, 0xcb, 0xd3, 0xdb, 0x9e, 0xc0, 0x5a,
	0xf4, 0x2e, 0x5a, 0xa4, 0x75, 0x4b, 0xb6, 0x85, 0x73, 0x1f, 0x65, 0x37, 0x11, 0x67, 0xe1, 0x57,
	0x77, 0x90, 0x7e, 0x75, 0x01, 0x59, 0x0e, 0xa9, 0x15, 0xbd, 0x26, 0x78, 0x36, 0x56, 0xbd, 0x30,
	0x1d, 0x61, 0x32, 0x76, 0x0e, 0x8f, 0x1a, 0x67, 0x51, 0x5b, 0x3c, 0xfa, 0x74, 0xfc, 0x31, 0x29,
	0x2d, 0x78, 0xf0, 0x64, 0x72, 0x8a, 0x3d, 0x83, 0xfc, 0x60, 0xa5, 0xc1, 0x4e, 0x17, 0xeb, 0x71,
	0x96, 0x5c, 0xd3, 0xb7, 0x7e, 0xff, 0x27, 0x00, 0x00, 0xff, 0xff, 0xef, 0x70, 0x84, 0x1b, 0xe7,
	0x02, 0x00, 0x00,
}
